#!/usr/bin/env python
from ecmwfapi import ECMWFDataServer
server = ECMWFDataServer()


def retrieve_2015_2017_daily():
    server.retrieve({
        "class": "ei",
        "dataset": "interim",
        "date": "2015-01-01/to/2017-01-31",
        "expver": "1",
        "grid": "0.75/0.75",
        "levtype": "sfc",
        "param": "134.128/167.128/168.128",
        "step": "0",
        "stream": "oper",
        "time": "00:00:00/06:00:00/12:00:00/18:00:00",
        "type": "an",
        "target": "output",
    })
    server.retrieve({
        "class": "ei",
        "dataset": "interim",
        "date": "2015-01-01/to/2017-01-31",
        "expver": "1",
        "grid": "0.75/0.75",
        "levtype": "sfc",
        "param": "134.128/167.128/168.128/228.128",
        "step": "3/6/9/12",
        "stream": "oper",
        "time": "00:00:00/12:00:00",
        "type": "fc",
        "target": "output",
    })



def retreive_2000_2016_monthly_mean():
    # TODO should retrive all months, not that big...
    server = ECMWFDataServer()
    server.retrieve({
        "class": "ei",
        "dataset": "interim",
        "date": "20000101/20000201/20000301/20000401/20000501/20000601/20000701/20000801/20000901/20001001/20001101/20001201/20010101/20010201/20010301/20010401/20010501/20010601/20010701/20010801/20010901/20011001/20011101/20011201/20020101/20020201/20020301/20020401/20020501/20020601/20020701/20020801/20020901/20021001/20021101/20021201/20030101/20030201/20030301/20030401/20030501/20030601/20030701/20030801/20030901/20031001/20031101/20031201/20040101/20040201/20040301/20040401/20040501/20040601/20040701/20040801/20040901/20041001/20041101/20041201/20050101/20050201/20050301/20050401/20050501/20050601/20050701/20050801/20050901/20051001/20051101/20051201/20060101/20060201/20060301/20060401/20060501/20060601/20060701/20060801/20060901/20061001/20061101/20061201/20070101/20070201/20070301/20070401/20070501/20070601/20070701/20070801/20070901/20071001/20071101/20071201/20080101/20080201/20080301/20080401/20080501/20080601/20080701/20080801/20080901/20081001/20081101/20081201/20090101/20090201/20090301/20090401/20090501/20090601/20090701/20090801/20090901/20091001/20091101/20091201/20100101/20100201/20100301/20100401/20100501/20100601/20100701/20100801/20100901/20101001/20101101/20101201/20110101/20110201/20110301/20110401/20110501/20110601/20110701/20110801/20110901/20111001/20111101/20111201/20120101/20120201/20120301/20120401/20120501/20120601/20120701/20120801/20120901/20121001/20121101/20121201/20130101/20130201/20130301/20130401/20130501/20130601/20130701/20130801/20130901/20131001/20131101/20131201/20140101/20140201/20140301/20140401/20140501/20140601/20140701/20140801/20140901/20141001/20141101/20141201/20150101/20150201/20150301/20150401/20150501/20150601/20150701/20150801/20150901/20151001/20151101/20151201/20160101/20160201/20160301/20160401/20160501/20160601/20160701/20160801/20160901/20161001/20161101/20161201",
        "expver": "1",
        "grid": "0.75/0.75",
        "levtype": "sfc",
        "param": "134.128/167.128/168.128",
        "stream": "moda",
        "type": "an",
        "target": "era_interim_monthly_means.nc",
    })

def retreive_climatology():
    # Mean temperature
    server.retrieve({
        "dataset": "interim",
        "class": "ei",
        "stream": "dacl",
        "expver": "1",
        "type": "em",
        "levtype": "sfc",
        "time": "00:00:00/06:00:00/12:00:00/18:00:00",
        "param": "2T",
        "date": "1989-01-01/to/2005-01-01",
        "target": "output1.grib",
    })
    #